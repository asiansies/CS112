/* 
 * Aihoa Le
 * aihoale@bu.edu
 * Homework 10
 * 
 * Note: All outputs and question #7 found at end of this file. 
 * 
 */

public class BSTdisplay {

	public static void main(String[] args) {
		BinarySearchTree myRightTree = new BinarySearchTree();
		BinarySearchTree myLeftTree = new BinarySearchTree();

		for (int i = 1; i <= 15; i++) {
			myRightTree.insertRegular(i, " ");
		}

		System.out.println("Output A (Regular Insertion)");
		System.out.println("-----------------------------------");
		System.out.println("Part A: Tree with values 1 to 15:");
		myRightTree.displayKeys();
		System.out.println("\n-----------------------------------");
		System.out.println("Part B: Tree with values 15 to 1:");

		for (int i = 15; i >= 1; i--) {
			myLeftTree.insertRegular(i, " ");
		}

		myLeftTree.displayKeys();
		System.out.println("\n-----------------------------------");
		 
		//----------------------------------------------------------------
		for (int i = 1; i <= 5; i++) {	
			BinarySearchTree myRightTree2 = new BinarySearchTree();
			BinarySearchTree myLeftTree2 = new BinarySearchTree();

			for (int j = 1; j <= 15; j++) {
				myRightTree2.insertRandom(j, " ");
			}

			System.out.println("\nOutput B (Random Insertion) #" + i);
			System.out.println("-----------------------------------");
			System.out.println("Part A: Random tree with values 1 to 15:");
			myRightTree2.displayKeys();
			System.out.println("\n-----------------------------------");
			System.out.println("Part B: Random tree with values 15 to 1:");

			for (int j = 15; j >= 1; j--) {
				myLeftTree2.insertRandom(j, " ");
			}

			myRightTree2.displayKeys();
			myLeftTree2.displayKeys();
			System.out.println("\n-----------------------------------");
		} 
		
		//----------------------------------------------------------------
		for (int i = 1; i <= 5; i++) {
			BinarySearchTree myRightTree3 = new BinarySearchTree();
			BinarySearchTree myLeftTree3 = new BinarySearchTree();
			
			for (int j = 1; j <= 15; j++) {
				myRightTree3.insertAVL(j, " ");
			}
			
			System.out.println("\nOutput C (AVL Insertion) #" + i);
			System.out.println("-----------------------------------");
			System.out.println("Part A: Random tree with values 1 to 15:");
			myRightTree3.displayKeys();
			System.out.println("\n-----------------------------------");
			System.out.println("Part B: Random tree with values 15 to 1:");

			for (int j = 15; j >= 1; j--) {
				myLeftTree3.insertAVL(j, " ");
			}

			myRightTree3.displayKeys();
			myLeftTree3.displayKeys();
			System.out.println();
		}
	}
}


/* 
 * OUTPUT OF CODE:
 * 
 * Output A (Regular Insertion)
 * -----------------------------------
 * Part A: Tree with values 1 to 15:
 * 1 (-1, 2); 
 * 
 * 2 (-1, 3); 
 * 
 * 3 (-1, 4); 
 * 
 * 4 (-1, 5); 
 * 
 * 5 (-1, 6); 
 * 
 * 6 (-1, 7); 
 * 
 * 7 (-1, 8); 
 * 
 * 8 (-1, 9); 
 * 
 * 9 (-1, 10); 
 * 
 * 10 (-1, 11); 
 * 
 * 11 (-1, 12); 
 * 
 * 12 (-1, 13); 
 * 
 * 13 (-1, 14); 
 * 
 * 14 (-1, 15); 
 * 
 * 15 (-1, -1); 
 * -----------------------------------
 * Part B: Tree with values 15 to 1:
 * 15 (14, -1); 
 * 
 * 14 (13, -1); 
 * 
 * 13 (12, -1); 
 * 
 * 12 (11, -1); 
 * 
 * 11 (10, -1); 
 * 
 * 10 (9, -1); 
 * 
 * 9 (8, -1); 
 * 
 * 8 (7, -1); 
 * 
 * 7 (6, -1); 
 * 
 * 6 (5, -1); 
 * 
 * 5 (4, -1); 
 * 
 * 4 (3, -1); 
 * 
 * 3 (2, -1); 
 * 
 * 2 (1, -1); 
 * 
 * 1 (-1, -1);
 * -----------------------------------
 * 
 * Output B (Random Insertion) #1
 * -----------------------------------
 * Part A: Random tree with values 1 to 15:
 * 15 (13, -1); 
 * 
 * 13 (11, 14); 
 * 
 * 11 (9, 12); 14 (-1, -1); 
 * 
 * 9 (8, 10); 12 (-1, -1); 
 * 
 * 8 (7, -1); 10 (-1, -1); 
 * 
 * 7 (6, -1); 
 * 
 * 6 (5, -1); 
 * 
 * 5 (3, -1); 
 * 
 * 3 (1, 4); 
 * 
 * 1 (-1, 2); 4 (-1, -1); 
 * 
 * 2 (-1, -1); 
 * -----------------------------------
 * Part B: Random tree with values 15 to 1:
 * 15 (13, -1); 
 * 
 * 13 (11, 14); 
 * 
 * 11 (9, 12); 14 (-1, -1); 
 * 
 * 9 (8, 10); 12 (-1, -1); 
 * 
 * 8 (7, -1); 10 (-1, -1); 
 * 
 * 7 (6, -1); 
 * 
 * 6 (5, -1); 
 * 
 * 5 (3, -1); 
 * 
 * 3 (1, 4); 
 * 
 * 1 (-1, 2); 4 (-1, -1); 
 * 
 * 2 (-1, -1); 1 (-1, 3); 
 * 
 * 3 (2, 6); 
 * 
 * 2 (-1, -1); 6 (5, 8); 
 * 
 * 5 (4, -1); 8 (7, 11); 
 * 
 * 4 (-1, -1); 7 (-1, -1); 11 (10, 13); 
 * 
 * 10 (9, -1); 13 (12, 15); 
 * 
 * 9 (-1, -1); 12 (-1, -1); 15 (14, -1); 
 * 
 * 14 (-1, -1); 
 * 
 * Output B (Random Insertion) #2
 * -----------------------------------
 * Part A: Random tree with values 1 to 15:
 * 13 (10, 14); 
 * 
 * 10 (8, 11); 14 (-1, 15); 
 * 
 * 8 (6, 9); 11 (-1, 12); 15 (-1, -1); 
 * 
 * 6 (3, 7); 9 (-1, -1); 12 (-1, -1); 
 * 
 * 3 (1, 4); 7 (-1, -1); 
 * 
 * 1 (-1, 2); 4 (-1, 5); 
 * 
 * 2 (-1, -1); 5 (-1, -1); 
 * -----------------------------------
 * Part B: Random tree with values 15 to 1:
 * 13 (10, 14); 
 * 
 * 10 (8, 11); 14 (-1, 15); 
 * 
 * 8 (6, 9); 11 (-1, 12); 15 (-1, -1); 
 * 
 * 6 (3, 7); 9 (-1, -1); 12 (-1, -1); 
 * 
 * 3 (1, 4); 7 (-1, -1); 
 * 
 * 1 (-1, 2); 4 (-1, 5); 
 * 
 * 2 (-1, -1); 5 (-1, -1); 2 (1, 5); 
 * 
 * 1 (-1, -1); 5 (4, 7); 
 * 
 * 4 (3, -1); 7 (6, 9); 
 * 
 * 3 (-1, -1); 6 (-1, -1); 9 (8, 12); 
 * 
 * 8 (-1, -1); 12 (11, 14); 
 * 
 * 11 (10, -1); 14 (13, 15); 
 * 
 * 10 (-1, -1); 13 (-1, -1); 15 (-1, -1); 
 * 
 * Output B (Random Insertion) #3
 * -----------------------------------
 * Part A: Random tree with values 1 to 15:
 * 13 (11, 14); 
 * 
 * 11 (9, 12); 14 (-1, 15); 
 * 
 * 9 (7, 10); 12 (-1, -1); 15 (-1, -1); 
 * 
 * 7 (5, 8); 10 (-1, -1); 
 * 
 * 5 (4, 6); 8 (-1, -1); 
 * 
 * 4 (3, -1); 6 (-1, -1); 
 * 
 * 3 (1, -1); 
 * 
 * 1 (-1, 2); 
 * 
 * 2 (-1, -1); 
 * -----------------------------------
 * Part B: Random tree with values 15 to 1:
 * 13 (11, 14); 
 * 
 * 11 (9, 12); 14 (-1, 15); 
 * 
 * 9 (7, 10); 12 (-1, -1); 15 (-1, -1); 
 * 
 * 7 (5, 8); 10 (-1, -1); 
 * 
 * 5 (4, 6); 8 (-1, -1); 
 * 
 * 4 (3, -1); 6 (-1, -1); 
 * 
 * 3 (1, -1); 
 * 
 * 1 (-1, 2); 
 * 
 * 2 (-1, -1); 2 (1, 4); 
 * 
 * 1 (-1, -1); 4 (3, 8); 
 * 
 * 3 (-1, -1); 8 (7, 12); 
 * 
 * 7 (6, -1); 12 (11, 13); 
 * 
 * 6 (5, -1); 11 (10, -1); 13 (-1, 15); 
 * 
 * 5 (-1, -1); 10 (9, -1); 15 (14, -1); 
 * 
 * 9 (-1, -1); 14 (-1, -1); 
 * 
 * Output B (Random Insertion) #4
 * -----------------------------------
 * Part A: Random tree with values 1 to 15:
 * 12 (8, 13); 
 * 
 * 8 (6, 9); 13 (-1, 14); 
 * 
 * 6 (4, 7); 9 (-1, 10); 14 (-1, 15); 
 * 
 * 4 (2, 5); 7 (-1, -1); 10 (-1, 11); 15 (-1, -1); 
 * 
 * 2 (1, 3); 5 (-1, -1); 11 (-1, -1); 
 * 
 * 1 (-1, -1); 3 (-1, -1); 
 * -----------------------------------
 * Part B: Random tree with values 15 to 1:
 * 12 (8, 13); 
 * 
 * 8 (6, 9); 13 (-1, 14); 
 * 
 * 6 (4, 7); 9 (-1, 10); 14 (-1, 15); 
 * 
 * 4 (2, 5); 7 (-1, -1); 10 (-1, 11); 15 (-1, -1); 
 * 
 * 2 (1, 3); 5 (-1, -1); 11 (-1, -1); 
 * 
 * 1 (-1, -1); 3 (-1, -1); 1 (-1, 3); 
 * 
 * 3 (2, 5); 
 * 
 * 2 (-1, -1); 5 (4, 7); 
 * 
 * 4 (-1, -1); 7 (6, 9); 
 * 
 * 6 (-1, -1); 9 (8, 12); 
 * 
 * 8 (-1, -1); 12 (11, 14); 
 * 
 * 11 (10, -1); 14 (13, 15); 
 * 
 * 10 (-1, -1); 13 (-1, -1); 15 (-1, -1); 
 * 
 * Output B (Random Insertion) #5
 * -----------------------------------
 * Part A: Random tree with values 1 to 15:
 * 14 (12, 15); 
 * 
 * 12 (9, 13); 15 (-1, -1); 
 * 
 * 9 (7, 10); 13 (-1, -1); 
 * 
 * 7 (5, 8); 10 (-1, 11); 
 * 
 * 5 (3, 6); 8 (-1, -1); 11 (-1, -1); 
 * 
 * 3 (1, 4); 6 (-1, -1); 
 * 
 * 1 (-1, 2); 4 (-1, -1); 
 * 
 * 2 (-1, -1); 
 * -----------------------------------
 * Part B: Random tree with values 15 to 1:
 * 14 (12, 15); 
 * 
 * 12 (9, 13); 15 (-1, -1); 
 * 
 * 9 (7, 10); 13 (-1, -1); 
 * 
 * 7 (5, 8); 10 (-1, 11); 
 * 
 * 5 (3, 6); 8 (-1, -1); 11 (-1, -1); 
 * 
 * 3 (1, 4); 6 (-1, -1); 
 * 
 * 1 (-1, 2); 4 (-1, -1); 
 * 
 * 2 (-1, -1); 1 (-1, 4); 
 * 
 * 4 (3, 7); 
 * 
 * 3 (2, -1); 7 (6, 10); 
 * 
 * 2 (-1, -1); 6 (5, -1); 10 (9, 12); 
 * 
 * 5 (-1, -1); 9 (8, -1); 12 (11, 14); 
 * 
 * 8 (-1, -1); 11 (-1, -1); 14 (13, 15); 
 * 
 * 13 (-1, -1); 15 (-1, -1); 
 * -----------------------------------
 *  
 * Output C (AVL Insertion) #1
 * -----------------------------------
 * Part A: Random tree with values 1 to 15:
 * 6 (3, 12); 
 * 
 * 3 (2, 5); 12 (9, 13); 
 * 
 * 2 (1, -1); 5 (4, -1); 9 (8, 11); 13 (-1, 14); 
 * 
 * 1 (-1, -1); 4 (-1, -1); 8 (7, -1); 11 (10, -1); 14 (-1, 15); 
 * 
 * 7 (-1, -1); 10 (-1, -1); 15 (-1, -1); 
 * -----------------------------------
 * Part B: Random tree with values 15 to 1:
 * 6 (3, 12); 
 * 
 * 3 (2, 5); 12 (9, 13); 
 * 
 * 2 (1, -1); 5 (4, -1); 9 (8, 11); 13 (-1, 14); 
 * 
 * 1 (-1, -1); 4 (-1, -1); 8 (7, -1); 11 (10, -1); 14 (-1, 15); 
 * 
 * 7 (-1, -1); 10 (-1, -1); 15 (-1, -1); 10 (4, 13); 
 * 
 * 4 (3, 7); 13 (11, 14); 
 * 
 * 3 (2, -1); 7 (5, 8); 11 (-1, 12); 14 (-1, 15); 
 * 
 * 2 (1, -1); 5 (-1, 6); 8 (-1, 9); 12 (-1, -1); 15 (-1, -1); 
 * 
 * 1 (-1, -1); 6 (-1, -1); 9 (-1, -1); 
 * 
 * Output C (AVL Insertion) #2
 * -----------------------------------
 * Part A: Random tree with values 1 to 15:
 * 6 (3, 12); 
 * 
 * 3 (2, 5); 12 (9, 13); 
 * 
 * 2 (1, -1); 5 (4, -1); 9 (8, 11); 13 (-1, 14); 
 * 
 * 1 (-1, -1); 4 (-1, -1); 8 (7, -1); 11 (10, -1); 14 (-1, 15); 
 * 
 * 7 (-1, -1); 10 (-1, -1); 15 (-1, -1); 
 * -----------------------------------
 * Part B: Random tree with values 15 to 1:
 * 6 (3, 12); 
 * 
 * 3 (2, 5); 12 (9, 13); 
 * 
 * 2 (1, -1); 5 (4, -1); 9 (8, 11); 13 (-1, 14); 
 * 
 * 1 (-1, -1); 4 (-1, -1); 8 (7, -1); 11 (10, -1); 14 (-1, 15); 
 * 
 * 7 (-1, -1); 10 (-1, -1); 15 (-1, -1); 10 (4, 13); 
 * 
 * 4 (3, 7); 13 (11, 14); 
 * 
 * 3 (2, -1); 7 (5, 8); 11 (-1, 12); 14 (-1, 15); 
 * 
 * 2 (1, -1); 5 (-1, 6); 8 (-1, 9); 12 (-1, -1); 15 (-1, -1); 
 * 
 * 1 (-1, -1); 6 (-1, -1); 9 (-1, -1); 
 * 
 * Output C (AVL Insertion) #3
 * -----------------------------------
 * Part A: Random tree with values 1 to 15:
 * 6 (3, 12); 
 * 
 * 3 (2, 5); 12 (9, 13); 
 * 
 * 2 (1, -1); 5 (4, -1); 9 (8, 11); 13 (-1, 14); 
 * 
 * 1 (-1, -1); 4 (-1, -1); 8 (7, -1); 11 (10, -1); 14 (-1, 15); 
 * 
 * 7 (-1, -1); 10 (-1, -1); 15 (-1, -1); 
 * -----------------------------------
 * Part B: Random tree with values 15 to 1:
 * 6 (3, 12); 
 * 
 * 3 (2, 5); 12 (9, 13); 
 * 
 * 2 (1, -1); 5 (4, -1); 9 (8, 11); 13 (-1, 14); 
 * 
 * 1 (-1, -1); 4 (-1, -1); 8 (7, -1); 11 (10, -1); 14 (-1, 15); 
 * 
 * 7 (-1, -1); 10 (-1, -1); 15 (-1, -1); 10 (4, 13); 
 * 
 * 4 (3, 7); 13 (11, 14); 
 * 
 * 3 (2, -1); 7 (5, 8); 11 (-1, 12); 14 (-1, 15); 
 * 
 * 2 (1, -1); 5 (-1, 6); 8 (-1, 9); 12 (-1, -1); 15 (-1, -1); 
 * 
 * 1 (-1, -1); 6 (-1, -1); 9 (-1, -1); 
 * 
 * Output C (AVL Insertion) #4
 * -----------------------------------
 * Part A: Random tree with values 1 to 15:
 * 6 (3, 12); 
 * 
 * 3 (2, 5); 12 (9, 13); 
 * 
 * 2 (1, -1); 5 (4, -1); 9 (8, 11); 13 (-1, 14); 
 * 
 * 1 (-1, -1); 4 (-1, -1); 8 (7, -1); 11 (10, -1); 14 (-1, 15); 
 * 
 * 7 (-1, -1); 10 (-1, -1); 15 (-1, -1); 
 * -----------------------------------
 * Part B: Random tree with values 15 to 1:
 * 6 (3, 12); 
 * 
 * 3 (2, 5); 12 (9, 13); 
 * 
 * 2 (1, -1); 5 (4, -1); 9 (8, 11); 13 (-1, 14); 
 * 
 * 1 (-1, -1); 4 (-1, -1); 8 (7, -1); 11 (10, -1); 14 (-1, 15); 
 * 
 * 7 (-1, -1); 10 (-1, -1); 15 (-1, -1); 10 (4, 13); 
 * 
 * 4 (3, 7); 13 (11, 14); 
 * 
 * 3 (2, -1); 7 (5, 8); 11 (-1, 12); 14 (-1, 15); 
 * 
 * 2 (1, -1); 5 (-1, 6); 8 (-1, 9); 12 (-1, -1); 15 (-1, -1); 
 * 
 * 1 (-1, -1); 6 (-1, -1); 9 (-1, -1); 
 * 
 * Output C (AVL Insertion) #5
 * -----------------------------------
 * Part A: Random tree with values 1 to 15:
 * 6 (3, 12); 
 * 
 * 3 (2, 5); 12 (9, 13); 
 * 
 * 2 (1, -1); 5 (4, -1); 9 (8, 11); 13 (-1, 14); 
 * 
 * 1 (-1, -1); 4 (-1, -1); 8 (7, -1); 11 (10, -1); 14 (-1, 15); 
 * 
 * 7 (-1, -1); 10 (-1, -1); 15 (-1, -1); 
 * -----------------------------------
 * Part B: Random tree with values 15 to 1:
 * 6 (3, 12); 
 * 
 * 3 (2, 5); 12 (9, 13); 
 * 
 * 2 (1, -1); 5 (4, -1); 9 (8, 11); 13 (-1, 14); 
 * 
 * 1 (-1, -1); 4 (-1, -1); 8 (7, -1); 11 (10, -1); 14 (-1, 15); 
 * 
 * 7 (-1, -1); 10 (-1, -1); 15 (-1, -1); 10 (4, 13); 
 * 
 * 4 (3, 7); 13 (11, 14); 
 * 
 * 3 (2, -1); 7 (5, 8); 11 (-1, 12); 14 (-1, 15); 
 * 
 * 2 (1, -1); 5 (-1, 6); 8 (-1, 9); 12 (-1, -1); 15 (-1, -1); 
 * 
 * 1 (-1, -1); 6 (-1, -1); 9 (-1, -1); 
 * 
 *  
 *  Question 7: AVL results differ from random results because AVL
 *  balancing results in optimally balanced trees each time. Trees 
 *  created using the AVL method contain the minimum number of levels
 *  each time.
 *  
 */
